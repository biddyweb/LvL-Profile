<?php
// $Id$

/**
* VP-Core is a Full Featured, Webservice Oriented Media Management and
* Distribution platform (http://www.vpcore.nl)
*
* Copyright (C) 2009 Kennisnet (http://www.kennisnet.nl)
*
* VP-Core is based on the open source Drupal platform and was originally
* developed by Madcap BV (http://www.madcap.nl)
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, you can find it at:
* http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
*/

/**
 * @file
 * This module enables various statistics for frontend applications.
 */

// Includes.
require_once('mediamosa_connector_fe.class.inc');

define("FE_PERMISSION_VIEW_STATS", "view mediamosa frontend statistics");

define("FE_STATS_PER_PAGE", 50);

//define("FE_STATS_PER_PAGE_USED_DISKSPACE", FE_STATS_PER_PAGE);
//define("FE_STATS_PER_PAGE_REQUESTED_STREAMS", FE_STATS_PER_PAGE);
//define("FE_STATS_PER_PAGE_MOST_POPULAR_MEDIAFILES", FE_STATS_PER_PAGE);

// Form names.
define('FE_STATS_FORMNAME_USED_DISKSPACE', 'used_diskspace');
define('FE_STATS_FORMNAME_REQUESTED_STREAMS', 'requested_streams');

/**
 * Types for datausagevideo REST call.
 */
define('FE_STATS_DATAUSAGE_TYPE_CONTAINER', 'container');
define('FE_STATS_DATAUSAGE_TYPE_GROUP', 'group');
define('FE_STATS_DATAUSAGE_TYPE_USER', 'user');

/**
 * Types for getting links to pages of given type.
 */
define("FE_PATH_TYPE_ASSET", "asset");
define("FE_PATH_TYPE_MEDIAFILE", "mediafile");
define("FE_PATH_TYPE_COLLECTION", "collection");
define("FE_PATH_TYPE_STILL", "still");

/**
 * Implementation of hook_perm().
 */
function mediamosa_fe_statistics_perm() {
  return array(FE_PERMISSION_VIEW_STATS);
}

/**
 * Implementation of hook_menu().
 */
function mediamosa_fe_statistics_menu() {
  $items['stats'] = array(
    'page callback' => 'mediamosa_fe_statistics_overview',
    'access arguments' => array(FE_PERMISSION_VIEW_STATS),
    'title' => 'Statistics',
  );

  // TODO The REST call used by this item is not ready in MediaMosa.
  //$items['stats/most_popular_mediafiles'] = array(
  //  'page callback' => 'mediamosa_fe_statistics_most_popular_mediafiles',
  //  'access arguments' => array(FE_PERMISSION_VIEW_STATS),
  //  'type' => MENU_VISIBLE_IN_BREADCRUMB,
  //  'weight' => 1,
  //  'title' => 'Overview of popular mediafiles',
  //);

  $items['stats/used_diskspace'] = array(
    'page callback' => 'mediamosa_fe_statistics_used_diskspace',
    'access arguments' => array(FE_PERMISSION_VIEW_STATS),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'weight' => 1,
    'title' => 'Overview of diskspace used',
  );

  $items['stats/requested_streams'] = array(
    'page callback' => 'mediamosa_fe_statistics_requested_streams',
    'access arguments' => array(FE_PERMISSION_VIEW_STATS),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'weight' => 1,
    'title' => 'Overview stream requests',
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function mediamosa_fe_statistics_help($path, $arg) {
  switch ($path) {
    case 'stats':
      return '<p>' . t('Welcome to the statistics overview. Please select one of the statistics options.') . '<p>';
    case 'stats/most_popular_mediafiles':
      return '<p>' . t('This page show the most popular mediafiles.') . '<p>';
    case 'stats/used_diskspace':
      return '<p>' . t('This page displays a list of the disk usage per container.') . '<p>';
    case 'stats/requested_streams':
      return '<p>' . t('This page displays a list of requested streams. Note that this overview gives the number of created symlinks, not the eventually streamed mediafiles.') . '<p>';
  }
}

/**
 * Overview of all statstics options.
 *
 */
function mediamosa_fe_statistics_overview() {

  $menus = mediamosa_fe_statistics_menu();

  $items = array();

  foreach ($menus as $menu_path => $menu) {
    if (!preg_match('/stats\/[a-z]*/', $menu_path)) {
      continue;
    }

    $items[] = l($menu['title'], $menu_path);
  }

  $output = theme('item_list', $items, $title);

  return $output;
}

/**
 * Implementation of hook_theme().
 */
function mediamosa_fe_statistics_theme() {
  return array(
    'mediamosa_fe_statistics_filter' => array(
      'arguments' => array('mediamosa_fe_form_id'),
    ),
    'mediamosa_fe_statistics_listing' => array(
      'arguments' => array('header', 'rows', 'options'),
    ),
    //'mediamosa_fe_statistics_filter_form' => array('form' => NULL)
  );
}

/**
 * Theme statistics filter.
 *
 * @param $mediamosa_fe_form_id
 */
function theme_mediamosa_fe_statistics_filter($mediamosa_fe_form_id) {
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'mediamosa_fe_statistics') . '/mediamosa_fe_statistics.css');

  // Get the form.
  return drupal_get_form('mediamosa_fe_statistics_filter_form', $mediamosa_fe_form_id);
}

/**
 * Form for statistics filter.
 *
 * @param $form_values
 * @param $mediamosa_fe_form_id
 *
 * @return array() $form
 */
function mediamosa_fe_statistics_filter_form($form_values, $mediamosa_fe_form_id) {

  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Filter'),
    '#collapsible' => TRUE,
  );

  $form['filter']['period']['from']['year_from'] = array(
    '#type' => 'select',
    '#title' => 'From year',
    '#options' => drupal_map_assoc(range(2004, date("Y"))),
    '#value' => isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from'] : date("Y"),
  );

  $form['filter']['period']['from']['month_from'] = array(
    '#type' => 'select',
    '#title' => 'From month',
    '#options' => drupal_map_assoc(range(1, 12)),
    '#value' => isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from'] : date("n"),
  );

  // TODO
  // We support container type now only.
  if (FALSE) {
  //if ($mediamosa_fe_form_id == FE_STATS_FORMNAME_USED_DISKSPACE) {
    $form['filter']['period']['type'] = array(
      '#type' => 'select',
      '#title' => 'Type',
      '#options' => array(FE_STATS_DATAUSAGE_TYPE_CONTAINER => t('Container'), FE_STATS_DATAUSAGE_TYPE_GROUP => t('Group'), FE_STATS_DATAUSAGE_TYPE_USER => t('User')),
      '#value' => isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['type']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['type'] : date("Y"),
    );
  }

  $form['filter']['go'] = array(
    '#prefix' => '<div>&nbsp;</div>',
    '#suffix' => '',
    '#type' => 'submit',
    '#value' => t('Filter'),
   );

  $form['filter']['mediamosa_fe_form_id'] = array(
    '#type' => 'hidden',
    '#value' => $mediamosa_fe_form_id,
  );

  return $form;
}

/**
 * Form submit.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function mediamosa_fe_statistics_filter_form_submit($form, &$form_state) {

  if (isset($form['#post']['mediamosa_fe_form_id'])) {
    $mediamosa_fe_form_id = $form['#post']['mediamosa_fe_form_id'];

    if (isset($form['#post']['mediamosa_fe_form_id']['year_from'])) {
      $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from'] = $form['#post']['year_from'];
    }

    if (isset($form['#post']['month_from']) && $form['#post']['month_from'] >= 1 && $form['#post']['month_from'] <= 12) {
      $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from'] = $form['#post']['month_from'];
    }

    if (isset($form['#post']['mediamosa_fe_form_id']['year_to'])) {
      $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_to'] = $form['#post']['year_to'];
    }

    if (isset($form['#post']['month_to']) && $form['#post']['month_to'] >= 1 && $form['#post']['month_to'] <= 12) {
      $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_to'] = $form['#post']['month_to'];
    }

    if (isset($form['#post']['mediamosa_fe_form_id']['type'])) {
      $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['type'] = $form['#post']['type'];
    }

    switch ($form['#post']['mediamosa_fe_form_id']) {
      case FE_STATS_FORMNAME_USED_DISKSPACE:
        drupal_goto('stats/used_diskspace');
      case FE_STATS_FORMNAME_REQUESTED_STREAMS:
        drupal_goto('stats/requested_streams');
    }
  }

  drupal_goto('stats');
}

/**
 * Theme stats listing.
 *
 * @param $items
 * @param $table_settings
 * @param array() $options
 *   Reserved for later usage.
 */
function theme_mediamosa_fe_statistics_listing($items, $table_settings, $options = array()) {

  $columns = array();

  $header = array();
  $rows = array();

  foreach ($table_settings['columns'] as $name => $column) {
    $column['name'] = $name;
    $columns[] = $column;

    $tmp = array('data' => $column['title']);
    if (isset($column['field'])) {
      $tmp['field'] = $column['field'];
      $tmp['sort'] = isset($column['sort']) ? isset($column['sort']) : 'asc';
    }

    if (isset($column['width'])) {
      $tmp['width'] = $column['width'];
    }

    $header[] = $tmp;
  }

  foreach ($items as $item) {
    $row = array();
    foreach ($columns as $column) {
      $link = check_plain((string)$item[$column['name']]);

      if (isset($column['user_func'])) {
        $link = call_user_func($column['user_func'], $link);
      }

      if (isset($column['path_type']) && isset($column['path_type_param']) && isset($item[$column['path_type_param']])) {
        $link = _statistics_path_get($item[$column['path_type_param']], $column['path_type'], $item[$column['path_type_param']]);
      }

      $row[] = array(
        'data' => $link,
      );
    }

    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}

/**
 * Most Popular Mediafiles.
 */
function mediamosa_fe_statistics_most_popular_mediafiles() {

  $output = "";

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $order_by = $_GET['order'] = !isset($_GET['order']) ? t('Created') : $_GET['order'];
  $order_direction = strtolower(isset($_GET['sort']) ? $_GET['sort'] : 'desc');
  $order_direction = ($order_direction == 'desc' || $order_direction == 'asc' ? $order_direction : 'desc');

  $a_order_by = array(
    t('Filename') => array('column' => 'filename'),
    t('Created') => array('column' => 'created'),
    t('Owner') => array('column' => 'owner_id'),
    t('Count') => array('column' => 'count'),
  );

  $order_by = isset($a_order_by[$order_by]) ? $a_order_by[$order_by]['column'] : $a_order_by[t('Created')]['column'];

  $optional = array(
    'order_by' => $order_by,
    'order_direction' => $order_direction,
    'offset' => $page * FE_STATS_PER_PAGE,
    'limit' => FE_STATS_PER_PAGE,
  );

  $xml_result = _mediamosa_sdk_statistics_most_popular_mediafiles($optional);
  if (!$xml_result) {
    drupal_set_message('Internal error.');
    return '';
  }

  $table_settings = array(
    'columns' => array(
      'filename' => array(
        'title' => t('Filename'),
        'path_type' => FE_PATH_TYPE_ASSET,
        'path_type_param' => 'asset_id',
        'field' => 'filename',
      ),
      'created' => array(
        'title' => t('Created'),
        'user_func' => 'mediamosa_sdk::datestamp2date',
        'width' => 180,
        'field' => 'created'
      ),
      'owner_id' => array(
        'title' => t('Owner'),
        'width' => 100,
        'field' => 'owner_id',
      ),
      'count' => array(
        'title' => t('Count'),
        'width' => 100,
        'field' => 'count',
      ),
    ),
  );

  $items = mediamosa_connector_ex::get_items_array($xml_result);

  $output .= theme_mediamosa_fe_statistics_listing($items, $table_settings);

  $items_count = (int) $xml_result->header->item_count_total;
  $output .= _statistics_fe_pager($page, $items_count, FE_STATS_PER_PAGE);

  return $output;
}

/**
 * Provide statistics about Used Diskspace.
 */
function mediamosa_fe_statistics_used_diskspace() {

  $mediamosa_fe_form_id = FE_STATS_FORMNAME_USED_DISKSPACE;

  $output = theme('mediamosa_fe_statistics_filter', $mediamosa_fe_form_id);

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $year_from = (isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from'] : date("Y"));
  $month_from = (isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from'] : date("n"));
  // TODO
  // We support container type now only.
  $type = FE_STATS_DATAUSAGE_TYPE_CONTAINER;
  //$type = (isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['type']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['type'] : FE_STATS_DATAUSAGE_TYPE_CONTAINER);

  $order_by = $_GET['order'] = !isset($_GET['order']) ? t('Used diskspace MB') : $_GET['order'];
  $order_direction = strtolower(isset($_GET['sort']) ? $_GET['sort'] : 'desc');
  $order_direction = ($order_direction == 'desc' || $order_direction == 'asc' ? $order_direction : 'desc');

  $a_order_by = array(
    t('Container Type') => array('column' => 'container_type'),
    t('Type') => array('column' => 'type'),
    t('Used diskspace MB') => array('column' => 'diskspace_mb'),
  );

  $order_by = isset($a_order_by[$order_by]) ? $a_order_by[$order_by]['column'] : $a_order_by[t('Used diskspace MB')]['column'];

  $optional = array(
    'order_by' => $order_by,
    'order_direction' => $order_direction,
    'offset' => $page * FE_STATS_PER_PAGE,
    'limit' => FE_STATS_PER_PAGE,
  );

  $xml_result = _mediamosa_sdk_statistics_datausagevideo($month_from, $year_from, $type, $optional);
  if (!$xml_result) {
    drupal_set_message('Internal error.');
    return '';
  }

  $a_table_settings = array(
    'columns' => array(
      'container_type' => array(
        'title' => t('Container Type'),
        'field' => 'container_type',
      ),
      'type' => array(
        'title' => t('Type'),
        'width' => 100,
        'field' => 'type',
      ),
      'diskspace_mb' => array(
        'title' => t('Used diskspace MB'),
        'width' => 150,
        'field' => 'diskspace_mb',
      ),
    ),
  );

  $items = mediamosa_connector_ex::get_items_array($xml_result);
  $output .= theme_mediamosa_fe_statistics_listing($items, $a_table_settings);

  $items_count = (int) $xml_result->header->item_count_total;
  $output .= _statistics_fe_pager($page, $items_count, FE_STATS_PER_PAGE);
  return $output;
}

/**
 * Requested Streams.
 */
function mediamosa_fe_statistics_requested_streams() {
  $mediamosa_fe_form_id = FE_STATS_FORMNAME_REQUESTED_STREAMS;

  $year_from = (isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['year_from'] : date("Y"));
  $month_from = (isset($_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from']) ? $_SESSION['mediamosa_fe'][$mediamosa_fe_form_id]['month_from'] : date("n"));

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $order_by = $_GET['order'] = !isset($_GET['order']) ? t('Created') : $_GET['order'];
  $order_direction = strtolower(isset($_GET['sort']) ? $_GET['sort'] : 'desc');
  $order_direction = ($order_direction == 'desc' || $order_direction == 'asc' ? $order_direction : 'desc');

  $a_order_by = array(
    t('Mediafile ID') => array('column' => 'mediafile_id'),
    t('Time') => array('column' => 'time'),
    t('Duration') => array('column' => 'duration'),
    t('Size') => array('column' => 'bytes'),
  );

  $output = theme('mediamosa_fe_statistics_filter', $mediamosa_fe_form_id);

  $order_by = isset($a_order_by[$order_by]) ? $a_order_by[$order_by]['column'] : $a_order_by[t('Created')]['column'];

  $optional = array(
    'order_by' => $order_by,
    'order_direction' => $order_direction,
    'offset' => $page * FE_STATS_PER_PAGE,
    'limit' => FE_STATS_PER_PAGE,
  );

  $xml_result = _mediamosa_sdk_statistics_requested_streams($month_from, $year_from, $optional);
  if (!$xml_result) {
    drupal_set_message('Internal error.');
    return '';
  }

  $table_settings = array(
    'columns' => array(
      'mediafile_id' => array(
        'title' => t('Mediafile ID'),
        'field' => 'mediafile_id',
      ),
      'time' => array(
        'title' => t('Time'),
        'width' => 180,
        'field' => 'time',
      ),
      'duration' => array(
        'title' => t('Duration'),
        'user_func' => '_statistics_fe_convertduration',
        'field' => 'duration',
      ),
      'bytes' => array(
        'title' => t('Size'),
        'width' => 100,
        'user_func' => 'format_size',
        'field' => 'bytes',
      ),
    ),
  );

  $items = mediamosa_connector_ex::get_items_array($xml_result);
  $output .= theme_mediamosa_fe_statistics_listing($items, $table_settings);
  $items_count = (int) $xml_result->header->item_count_total;

  $output .= _statistics_fe_pager($page, $items_count, FE_STATS_PER_PAGE);

  return $output;
}

/**
 * Implementation of hook_block().
 */
function mediamosa_fe_statistics_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Latest videos'),
      );
      $blocks[1] = array(
        'info' => t('Populair videos'),
      );
      return $blocks;
      break;

    case 'view':
      switch ($delta) {
        case 0:
          $block = array(
            'subject' => t('Latest videos'),
            'content' => _mediamosa_fe_statistics_block_latest_videos(),
          );
          break;
        case 1:
          $block = array(
            'subject' => t('Popular videos'),
            'content' => _mediamosa_fe_statistics_block_poulair_videos(),
          );
          break;
      }
      return $block;
      break;
  }
}

/**
 * Block callback for popular videos.
 */
function _mediamosa_fe_statistics_block_poulair_videos() {
  $connector = new mediamosa_connector_ex();
  $response = $connector->request_get('statistics/popularmediafiles?limit=5');

  $items = $asset_ids = array();

  foreach ($response->xml->items->item as $item) {
    $asset_ids[] = (string) $item->asset_id;
    $mediafile_ids[(string) $item->asset_id] = (string) $item->mediafile_id;
  }

  $search = '&asset_id[]='. implode('&asset_id[]=', $asset_ids);
  $response = $connector->request_get('asset?limit=5&asset_id_match=exact&operator=or'. $search);

  foreach ($response->xml->items->item as $item) {
    $items[array_search((string)$item->asset_id, $asset_ids)] = l(
      _statistics_trim_string($item->dublin_core->title, 25),
      'asset/'. $item->asset_id .'/'. $mediafile_ids[(string)$item->asset_id],
      array('html' => TRUE)
    );
  }

  ksort($items);

  return theme('item_list', $items);
}

/**
 * Block callback for latest videos.
 */
function _mediamosa_fe_statistics_block_latest_videos() {
  $connector = new mediamosa_connector_ex();
  $response = $connector->request_get('asset?limit=5&order_by=videotimestamp&order_direction=desc');

  foreach ($response->xml->items->item as $item) {
    $items[] = l(_statistics_trim_string($item->dublin_core->title, 25), 'asset/'. $item->asset_id, array('html' => TRUE));
  }

  return theme('item_list', $items);
}

/**
 * Get data usage statistics.
 *
 * @param @month
 * @param @year
 * @param @type
 *   Have to be one of 'container', 'group' or 'user'.
 * @param @optional
 *   array which may contain elements like order_by, order_direction, limit, etc
 *
 * @return FALSE on failure, XML with data otherwise
 */
function _mediamosa_sdk_statistics_datausagevideo($month, $year, $type, $optional = array()) {
  $connector = new mediamosa_connector_ex();

  assert(in_array($type, array('container', 'group', 'user')));

  $optional['type'] = $type;
  $optional['month'] = $month;
  $optional['year'] = $year;

  // Setup default.
  $optional += array(
    'order_by' => '',
    'order_direction' => 'DESC',
  );

  // Do request.
  $response = $connector->request_get('statistics/datausagevideo', array('data' => $optional));

  return $response ? $response->xml : FALSE;
}

/**
 * Get data usage statistics.
 *
 * @param @optional
 *   array which may contain elements like order_by, order_direction, limit, etc
 *
 * @return FALSE on failure, XML with data otherwise
 */
function _mediamosa_sdk_statistics_most_popular_mediafiles($optional = array()) {
  $connector = new mediamosa_connector_ex();

  // Setup default.
  $optional += array(
    'order_by' => '',
    'order_direction' => 'DESC',
  );

  // Do request.
  $response = $connector->request_get('statistics/popularmediafiles', array('data' => $optional));

  return $response ? $response->xml : FALSE;
}

/**
 * Get stream usage statistics.
 *
 * @param $month
 * @param $year
 * @param $optional
 *   array which may contain elements like order_by, order_direction, limit, etc
 *
 * @return FALSE on failure, XML with data otherwise
 */
function _mediamosa_sdk_statistics_requested_streams($month, $year, $optional = array()) {
  $connector = new mediamosa_connector_ex();

  $optional['month'] = $month;
  $optional['year'] = $year;

  // Setup default.
  $optional += array(
    'order_by' => '',
    'order_direction' => 'DESC',
  );

  // Do request.
  $response = $connector->request_get('statistics/playedstreams', array('data' => $optional));

  return $response ? $response->xml : FALSE;
}

/**
 * This function returns a trimmed string, optionally in an HTML <span> tag.
 * @param $text
 *   text to trim
 * @param $length
 *   length limitation
 * @param $html
 *   make HTML from it
 * @param $empty
 *   is returning empty string allowed?
 */
function _statistics_trim_string($text, $length = FALSE, $html = TRUE, $empty = FALSE) {
  if (($length) && (drupal_strlen($text) > $length)) {
    $text = check_plain($text);
    if ($html) {
      return sprintf('<span title="%s">%s</span>', $text, drupal_substr($text, 0, $length - 1) ."&hellip;");
    }
    else {
      return htmlspecialchars_decode(drupal_substr($text, 0, $length - 1) . '...');
    }
  }
  if (drupal_strlen(trim($text)) < 1) {
    $text = ($empty === FALSE) ? t('n/a') : $empty;
  }
  if ($html) {
    return htmlspecialchars($text);
  }
  return $text;
}

/**
 * Get path to page with given type.
 *
 * @param $obj_id
 * @param $type
 *   Type of the object, valid values are FE_PATH_TYPE_ASSET, FE_PATH_TYPE_MEDIAFILE, FE_PATH_TYPE_COLLECTION, FE_PATH_TYPE_STILL.
 * @param $title
 *
 * @return html link
 */
function _statistics_path_get($obj_id, $type, $title) {

  // type to URL-format dictionary
  $types = array(
    FE_PATH_TYPE_ASSET => 'asset/%s',
    //FE_PATH_TYPE_MEDIAFILE => 'media/%s',
    //FE_PATH_TYPE_COLLECTION => '???/%s',
    //FE_PATH_TYPE_STILL => 'ticket/%s',
  );

  assert(isset($types[$type]));

  $format = $types[$type];
  $url = sprintf($format, $obj_id);

  // A theme_something function will be applied here.
  return l($title, $url);
}

/**
 * This function returns a themed pager.
 *
 * @param $page
 * @param $item_count
 * @param $item_limit
 * @param $element
 */
function _statistics_fe_pager($page, $item_count, $item_limit, $element = 0) {
  global $pager_page_array, $pager_total, $pager_total_items;

  $pager_page_array = array($element => $page);
  // Number of items.
  $pager_total_items[$element] = $item_count;
  if (!is_array($element)) {
    $pager_total[$element] = ceil($item_count / $item_limit);
  }

  return theme(
    'pager',
    // An array of labels for the controls in the pager.
    array(),
    // The number of query results to display per page.
    $item_limit,
    // An optional integer to distinguish between multiple pagers on one page.
    $element,
    // An associative array of query string parameters to append to the pager links.
    array(),
    // The maximum number of pages in the list.
    5
  );
}

/**
 * This function returns a duration in format h:i:s.
 *
 * @param $duration_ms
 *   duration in milliseconds
 */
function _statistics_fe_convertduration($duration) {
  if (is_numeric($duration)) {
    $duration_ms = $duration % 1000;
    $duration = (int)($duration / 1000);
    $duration_sec = $duration % 60;
    $duration_min = (int)($duration / 60) % 60;
    $duration_hour = (int)($duration / 3600) % 60;

    $output = sprintf('%02d:%02d:%02d.%02d', $duration_hour, $duration_min, $duration_sec, $duration_ms/10);
  }
  else {
    $output = t('Empty');
  }

  return $output;
}
