<?php
// $Id$

/**
* VP-Core is a Full Featured, Webservice Oriented Media Management and
* Distribution platform (http://www.vpcore.nl)
*
* Copyright (C) 2009 Kennisnet (http://www.kennisnet.nl)
*
* VP-Core is based on the open source Drupal platform and was originally
* developed by Madcap BV (http://www.madcap.nl)
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, you can find it at:
* http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
*/

/**
 * @file
 * This module is an extension to mediamosa_videocontent.
 * Enables managing of DC and QDC fields.
 *
 * For each field there is a three aspects: field, widget, formatter.
 *
 * Based on http://www.lullabot.com/articles/creating-custom-cck-fields
 *
 */

/**
 * Required helpers.
 */
require_once('mediamosa_metadata_definition.inc');

/**
 * Implementation of hook_perm().
 */
function mediamosa_metadata_perm() {
  return array('create url aliases', 'administer url aliases');
}

//==========================================//
// DEFINING A FIELD
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function mediamosa_metadata_field_info() {
  return array(
    // The machine name of the field,
    // no more than 32 characters.
    'mediamosa_metadata' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => 'Mediamosa metadata',
      // A description of what type of data the field stores.
      'description' => t('Store metadata in the database.'),
      // An icon to use in Panels.
      'content_icon' => 'icon_content_text.png',
    ),
  );
 }

/**
 * Implementation of hook_field_settings().
 */
function mediamosa_metadata_field_settings($op, $field) {

  switch ($op) {
    // Create the form element to be used on the field
    // settings form. Field settings will be the same for
    // all shared instances of the same field and should
    // define the way the value will be stored
    // in the database.
    case 'form':
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        '#required' => FALSE,

        // Use #element_validate to validate the settings.
        '#element_validate' => array('_mediamosa_metadata_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be a number between 1 and 255'),
      );
      return $form;

    // Return an array of the names of the field settings
    // defined by this module. These are the items that
    // CCK will store in the field definition
    // and they will be available in the $field array.
    // This should match the items defined in 'form' above.
    case 'save':
      return array('max_length');

    // Define the database storage for this field using
    // the same construct used by schema API. Most fields
    // have only one column, but there can be any number
    // of different columns. After the schema API values,
    // add two optional values to each column,
    //  'views', to define a Views field
    //  'sortable', to add a Views sort field
    case 'database columns':
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      return $columns;

    // Optional: Make changes to the default $data array
    // created for Views. Omit this if no changes are
    // needed, use it to add a custom handler or make
    // other changes.
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. The following
      // code illustrates how you would retrieve
      // the necessary data.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_value'];
      // Make changes to $data as needed here.
      return $data;
  }
}

/**
 * Custom validation of settings values.
 *
 * Create callbacks like this to do settings validation.
 */
function _mediamosa_metadata_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if ($value && !is_numeric($value)|| $value < 1 || $value > 255) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.'));
  }
}

/**
 * Implementation of hook_field().
 */
function mediamosa_metadata_field($op, &$node, $field, &$items, $teaser, $page) {

  switch ($op) {
    // Do validation on the field values here. The widget
    // will do its own validation and you cannot make any
    // assumptions about what kind of widget has been used,
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // The error_element is needed so that CCK can
          // set an error on the right sub-element when
          // fields are deeply nested in the form.
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) {
            unset($item['_error_element']);
          }
          if (!empty($item['value'])) {
            if (!empty($field['max_length']) && drupal_strlen($item['value']) > $field['max_length']) {
              form_set_error($error_element, t('%name: the value may not be longer than %max characters.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
            }

            // Array with fields, which needs DATETIME validation.
            static $datetime_names = array('field_meta_date' => TRUE, 'field_meta_created' => TRUE, 'field_meta_issued' => TRUE);

            if (isset($datetime_names[$field['field_name']])) {
              if (!_mediamosa_metadata_check_datestamp($item['value'])) {
                form_set_error($error_element, t("Invalid date time value for optional '%name', must be in format of 'YYYY-MM-DD HH-MM-SS' or 'YYYY-MM-DD'.", array('%name' => $field['widget']['label'])));
              }
            }
          }
        }
      }
      return $items;

    // This is where you make sure that user-provided
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        // Check if the values should be hidden (title => node title, description => node body).
        if (empty($field['widget']['use_node_value']) || !$field['widget']['use_node_value']) {
          $example = check_plain($item['value']);
          $items[$delta]['safe'] = $example;
        }
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 *
 * CCK has no way to know if something like a zero is
 * an empty value or a valid value, so return
 * TRUE or FALSE to a populated field $item array.
 * CCK uses this to remove empty multi-value elements
 * from forms.
 */
function mediamosa_metadata_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook content_generate().
 *
 * Optional, provide dummy value for nodes created
 * by the Devel Generate module.
 */
function mediamosa_metadata_content_generate($node, $field) {
  $node_field = array();
  // Generate a value that respects max_length.
  if (empty($field['max_length'])) {
    $field['max_length'] = 12;
  }
  $node_field['value'] = user_password($field['max_length']);
  return $node_field;
}

/**
 * Implementation of hook_token_list()
 * and hook_token_values().
 *
 * Optional, provide token values for this field.
 */
function mediamosa_metadata_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();

    $tokens['mediamosa_metadata']['raw']       = t('Raw, unfiltered text');
    $tokens['mediamosa_metadata']['formatted'] = t('Formatted and filtered text');

    return $tokens;
  }
}

function mediamosa_metadata_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = $object[0];

    $tokens['raw']  = $item['value'];
    $tokens['formatted'] = isset($item['view']) ? $item['view'] : '';
    return $tokens;
  }
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
function mediamosa_metadata_theme() {
  return array(
    // Themes for the formatters.
    'mediamosa_metadata_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'mediamosa_metadata_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 *
 */
function mediamosa_metadata_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display
      // fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter
      // can be used on.
      'field types' => array('mediamosa_metadata'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Plain text'),
      'field types' => array('mediamosa_metadata'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' field formatter.
 *
 * $element['#item']: the sanitized $delta value for the item,
 * $element['#field_name']: the field name,
 * $element['#type_name']: the $node->type,
 * $element['#formatter']: the $formatter_name,
 * $element['#node']: the $node,
 * $element['#delta']: the delta of this item, like '0',
 *
 */
function theme_mediamosa_metadata_formatter_default($element) {
  if (empty($element['#item']['safe'])) {
    return;
  }
  $key = substr($element['#field_name'], 11);

  $fields = _mediamosa_metadata_dc_qdc();
  $property = $fields[$key]['rdf'];
  if ($property) {
    $value = $element['#item']['safe'];
    $output = t('<span property="dc:!property">!value</span>', array('!property' => $property, '!value' => $value));
  }
  else {
    // If RDF is not defined display just the text itself, similar to plain formatter.
    $output = $element['#item']['safe'];
  }

  return $output;
}

/**
 * Theme function for 'plain' field formatter.
 */
function theme_mediamosa_metadata_formatter_plain($element) {
  return strip_tags($element['#item']['safe']);
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function mediamosa_metadata_widget_info() {
  return array(
    // The machine name of the widget, no more than 32
    // characters.
    'mediamosa_metadata_readwrite' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Mediamosa Metadata read-write'),
      // An array of the field types this widget can be
      // used with.
      'field types' => array('mediamosa_metadata'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'readonly' => FALSE,
    ),
    'mediamosa_metadata_readonly' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Mediamosa Metadata read-only'),
      // An array of the field types this widget can be
      // used with.
      'field types' => array('mediamosa_metadata'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'readonly' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function mediamosa_metadata_widget_settings($op, $widget) {

  switch ($op) {
    // Create the form element to be used on the widget
    // settings form. Widget settings can be different
    // for each shared instance of the same field and
    // should define the way the value is displayed to
    // the user in the edit form for that content type.
    case 'form':
      $form = array();

      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );

      // The user can hide the title and the description fields (title => node title, description => node body).
      if ($widget['label'] == 'Title' || $widget['label'] == 'Description') {
        $field = ($widget['label'] == 'Title' ? 'title' : 'body');
        $form['use_node_value'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use the node "@field"', array('@field' => $field,)),
          '#description' => t('Use the node "@field" in the asset metadata field, instead of this element.
            If you change this field, your existing metadata field will not be modified, untill you save all nodes in this node type.', array('@field' => $field,)),
          '#default_value' => $widget['use_node_value'],
        );
      }

      return $form;

    // Return an array of the names of the widget settings
    // defined by this module. These are the items that
    // CCK will store in the widget definition and they
    // will be available in the $field['widget'] array.
    // This should match the items defined in 'form' above.
    case 'save':

      $save = array('size');

      // @see: 'form' part of this function.
      if ($widget['label'] == 'Title' || $widget['label'] == 'Description') {
        $save[] = 'use_node_value';
      }

      return $save;
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form.
 *
 * CCK core fields only add a stub element and builds
 * the complete item in #process so reusable elements
 * created by hook_elements can be plugged into any
 * module that provides valid $field information.
 *
 * Custom widgets that don't care about using hook_elements
 * can be built out completely at this time.
 *
 * If there are multiple values for this field and CCK is
 * handling multiple values, the content module will call
 * this function as many times as needed.
 *
 * @param $form
 *   the entire form array,
 *   $form['#node'] holds node information
 * @param $form_state
 *   the form_state,
 *   $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of
 *   subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function mediamosa_metadata_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // Hide fields, where we use the node equivalents (title => node title, description => node body).
  if (!empty($field['widget']['use_node_value']) && $field['widget']['use_node_value']) {
    return;
  }

  $element['value'] = array(
    '#title' => $field['widget']['label'],
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    //'#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'mediamosa_metadata'),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );

  if ($field['widget']['type'] == 'mediamosa_metadata_readonly') {
    // For readonly elements gray out the field and save existing values.
    $element['value']['#disabled'] = TRUE;
    $element['value']['#value'] = $element['value']['#default_value'];
  }

  // Used so that hook_field('validate') knows where to
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );

  return $element;
}

//==========================================//
// HANDLING THE FIELD
//==========================================//

/**
 * Implementation of hook_nodeapi().
 *
 */
function mediamosa_metadata_nodeapi(&$node, $op, $arg) {
  global $user;

  if ($op == 'view') {
    // Is there any metadata?
    $is_metadata_present = FALSE;
    foreach ($node as $key => $value) {
      if (substr($key, 0, 11) != 'field_meta_') {
        continue;
      }
      if ($value[0]['value']) {
        $is_metadata_present = TRUE;
        break;
      }
    }
    if ($is_metadata_present) {
      // Meta fields have wights in range 40..66
      $node->content['dc_qdc_prefix'] = array(
        '#value' => '<div xmlns:dc="http://purl.org/dc/elements/1.1/">',
        '#weight' => 39,
      );
      $node->content['dc_qdc_suffix'] = array(
        '#value' => '</div>',
        '#weight' => 70,
      );
    }
    return;
  }

  // Permissions are required for everything except node loading.
  if (user_access('create Mediamosa metadata') || user_access('administer Mediamosa metadata')) {
    $changed_metadata = array();
    $field_meta_length = drupal_strlen('field_meta_');

    switch ($op) {
      case 'insert':
        // Search for added metafields.
        foreach ($node as $key => $item) {
          if (strncmp($key, 'field_meta_', $field_meta_length)) {
            // We're not interested in this value.
            continue;
          }
          if (!empty($item[0]['value'])) {
            $changed_metadata[substr($key, $field_meta_length)] = array($item[0]['value']);
          }
        }
        $action = 'append';
        break;

      case 'update':
        $old_node = node_load($node->nid);

        // Search for changed metafields.
        foreach ($old_node as $key => $old_item) {
          if (strncmp($key, 'field_meta_', $field_meta_length)) {
            // We're not interested in this value.
            continue;
          }

          $item = $node->$key;
          $key_array = explode('_', $key);

          if ($old_item[0]['value'] != $item[0]['value']) {
            $changed_metadata[substr($key, $field_meta_length)] = array($item[0]['value']);
          }
          elseif (!empty($key_array[2])) {
            // Check the two special fields we always want to update.
            // Otherwise the node title and body overwrite them.
            if ($key_array[2] == 'title' || $key_array[2] == 'description') {
              $changed_metadata[substr($key, $field_meta_length)] = array($item[0]['value']);
            }
          }
        }
        $action = 'update';
        break;

      default:
        return;
    }
    if (!empty($changed_metadata)) {
      // Send changed metadata to Mediamosa.

      $connector = new mediamosa_connector();

      $asset_id = $node->asset_id;

      // Add action.
      $changed_metadata += array(
        'action' => $action,
      );

      $options = array(
        'user_id' => $user->name,
        'data' => $changed_metadata,
      );

      // Do request.
      $response = $connector->request_post('asset/'. $asset_id .'/metadata', $options);
    }
  }
}

/**
 * Check and validate a datestamp string
 * returns FALSE or valid string to use
 *
 * @param string $str
 * @return string or FALSE
 */
function _mediamosa_metadata_check_datestamp($str_date) {

  $str_date = trim($str_date);
  if ($str_date == '') {
    return '0000-00-00 00:00:00'; // Empty is ok
  }

  if (!preg_match('/^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?$/', $str_date)) {
    return FALSE;
  }

  if (strlen($str_date) == 10) {
    $str_date .= ' 00:00:00';
  }

  list($year, $month, $day, $hour, $minute, $second) = preg_split('/[:\- ]{1}/', $str_date);

  if (!checkdate($month, $day, $year)) {
    return FALSE;
  }

  if ($hour > 23 || $minute > 59 || $second > 59) {
    return FALSE;
  }

  return $str_date;
}

/**
 * Implementation of hook_media_mediamosa_node_update().
 *
 * @param array() $asset
 * @param object $node_original
 */
function mediamosa_metadata_media_mediamosa_node_update($asset, $node_original) {

  $node = node_load($node_original->nid, NULL, TRUE);

  // Title.
  $widget_settings = db_result(db_query_range("SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = 'field_meta_title' AND widget_module = 'mediamosa_metadata'", 0, 1));
  $widget_settings = unserialize($widget_settings);
  $title = (empty($asset['dublin_core']['title']) ? t('node has no title') : $asset['dublin_core']['title']);
  $node->title = ($widget_settings['use_node_value'] ? $title : $node_original->title);

  // Description.
  $widget_settings = db_result(db_query_range("SELECT widget_settings FROM {content_node_field_instance} WHERE field_name = 'field_meta_description' AND widget_module = 'mediamosa_metadata'", 0, 1));
  $widget_settings = unserialize($widget_settings);
  $node->body = ($widget_settings['use_node_value'] ? $asset['dublin_core']['description'] : $node_original->body);

  // Processing the Dublin core metadata fields.
  $metadata = array_merge($asset['dublin_core'], $asset['qualified_dublin_core']);

  foreach ($metadata as $key => $value) {
    if ($key == 'title' || $key == 'description') {
      continue;
    }

    $field_name = 'field_meta_' . $key;
    $ref = $node->$field_name;

    // If both are empty, we comparing NULL and empty string here.
    if ($ref[0]['value'] != $value) {
      // Most of the fields can have several values so be represented as an array.
      // We do NOT support multi-values, so lets keep only lates element in array.
      $node->{$field_name}[0]['value'] = is_array($value) ? end($value) : $value;
    }
  }

  $asset_info = _media_mediamosa_asset_get($asset['asset_id']);
  $mediafile = FALSE;
  foreach ($asset_info['mediafiles']['mediafile'] as $item) {
    // Not sure - is this check necessary? Do we have Stills in mediafiles?
    $mediafile = $item;
    if ($item['is_original_file'] == FALSE) {
      // We found encoded one.
      break;
    }
  }

  if ($mediafile && isset($mediafile['metadata'])) {
    // We have video attached, lets gather tech data.
    $metadata = $mediafile['metadata'];

    // The mediafile_id and is_original_file are special cases.
    // Mostly parameters can be taken directly from 'metadata' subarray, keys are the same.
    $node->field_meta_mediafile_id[0]['value'] = $mediafile['mediafile_id'];
    $node->field_meta_original[0]['value'] = $mediafile['is_original_file'];

    // Video size is combined from two metavariables.
    $node->field_meta_size[0]['value'] = $metadata['width'] .'px * '. $metadata['height'] .'px';

    // And here goes transparent stuff.
    $meta_keys = array(
      'file_duration',
      'filesize',
      'mime_type',
      'container_type',
      'fps',
      'video_codec',
    );
    foreach ($meta_keys as $key) {
      $field_name = 'field_meta_' . $key;
      $node->{$field_name}[0]['value'] = $metadata[$key];
    }

  }

  node_save($node);

}
