<?php

  /**
   * @file
   * Install script to install the nodereview module
   *
   */

/**
 * Implementation of hook_install().
 */

function nodereview_install() {

  // Use schema API to create database table.
  drupal_install_schema('nodereview');
}

/**
 * Implementation of hook_uninstall().
 */
function nodereview_uninstall() {
  // Use schema API to delete database table.
  drupal_uninstall_schema('nodereview');

  //Delete all the node type entry from nodetype table
  db_query("DELETE FROM {node_type} WHERE type='nodereview'");
  
  //Delet all nodereview labels
  for ($i = 1; $i < 11; $i++) {
      variable_del('nodereview_rating_label' . $i);
  }
  //Delete nodereview maximum rating and rating type
  variable_del('nodereview_maxrating');
  variable_del('nodereview_rating_type');

  //Delete nodereview node types & its help info
  foreach (node_get_types() as $type => $info) {
    variable_del('nodereview_use_' . $type);
    variable_del('nodereview_guide_' . $info->name);
  }
}

/**
 * Added description required
 */
function nodereview_update_1() {
  $ret = array();
  db_add_field(&$ret, 'nodereview_axes', 'description_required', array('description' => t('Whether or not a vote description is required.'), 'type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0));  return $ret;
}

/**
 * Implementation of hook_schema().
 */
function nodereview_schema() {

  $schema['nodereview'] = array(
    'description' => t('Stores reviewed node and the review node mapping.'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid of the review.'),
      ),

      'reviewed_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid to which is reviewed.'),
      ),

    ),
    'primary key' => array('nid'),
  );


  $schema['nodereview_axes'] = array(
    'description' => t('Stores axes labels for particular node types.'),
    'fields' => array(
      'aid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The {node}.nid of the review.'),
      ),

      'tag' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The tag for the axes.'),
      ),

      'node_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The node type to which the axes belong.'),
      ),

      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length'   => 11,
        'default'  => 0,
        'description' => t('The axes weight.'),
      ),

      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('The decsription about the axes.'),
      ),
      'description_required' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default'  => 0,
        'description' => t('Whether or not a vote description is required.'),
      ),
    ),
    'primary key' => array('aid'),
  );



  $schema['nodereview_reviews'] = array(
    'description' => t('Stores reviews.'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'length'   => 11,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid of the review.'),
      ),

      'aid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length'   => 11,
        'default'  => 0,
        'description' => t('The {axes}.nid of the review.'),
      ),

      'review' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('The review.'),
      ),

    ),
    'key' => array('nid'),
  );
  return $schema;
}


